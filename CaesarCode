package com.example.ceasar;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

    public class CaesarCode extends Application {
      
        @Override
        public void start(Stage primaryStage) {
        
        Button encryptButton = new Button("Enkripto");
            encryptButton.setOnAction(e -> {
                String inputText = inputTextArea.getText();
                if (isValidShift(shiftTextField.getText())) {
                    shift = Integer.parseInt(shiftTextField.getText()); // Merrim vlerën e shiftit nga TextField
                    String encryptedText = encrypt(inputText, shift);
                    outputTextArea.setText(encryptedText);
                } else {
                    outputTextArea.setText("Gabim: Shift-i duhet të jetë një numër mes 1 dhe 26");
                }
            });
        
        Button decryptButton = new Button("Dekripto");
            decryptButton.setOnAction(e -> {
                String inputText = inputTextArea.getText();
                if (isValidShift(shiftTextField.getText())) {
                    shift = Integer.parseInt(shiftTextField.getText()); // Merrim vlerën e shiftit nga TextField
                    String decryptedText = decrypt(inputText, shift);
                    outputTextArea.setText(decryptedText);
                } else {
                    outputTextArea.setText("Gabim: Shift-i duhet të jetë një numër mes 1 dhe 26");
                }
            });
        }
        // Metoda për enkriptimin e kodit të Cezarit
        private String encrypt(String input, int shift) {
        StringBuilder result = new StringBuilder();
        for (char c : input.toCharArray()) {
            if (Character.isLetter(c)) {
                char base = Character.isLowerCase(c) ? 'a' : 'A';
                c = (char) (base + (c - base + shift) % 26);
            }
            result.append(c);
        }
        return result.toString();
    }
        
        
        
        // Metoda për dekriptimin e kodit të Cezarit
        private String decrypt(String input, int shift) {
        
        }
        
        // Metoda për të verifikuar nëse vlera e shiftit është e vlefshme (është numër mes 1 dhe 26)
         private boolean isValidShift(String shiftText) {
            try {
                int shift = Integer.parseInt(shiftText);
                return shift >= 1 && shift <= 26;
            } catch (NumberFormatException e) {
                return false;
            }
         }
         
          public static void main(String[] args) {
            launch(args);
        }
        
}
